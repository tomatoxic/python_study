#001 함수만들기
# ​함수를 만들어봅시다. 아래의 예는 함수를 정의하고 호출하는 코드입니다. 예제를 참고하여 문제를 해결해 보세요.
def function():         # 함수의 정의
    print('안녕, 함수!')
print('첫줄 실행')
function()          # 함수의 호출
print('끝줄 실행')
# 문제
# 함수 add는 매개변수로 a와 b를 받고 있습니다. 코드의 3번째 줄을 수정해서 result에 a와 b를 더한 값을 저장하고 출력되도록 만들어 보세요.
def add(a,b):
    #함수 add에서 a와 b를 입력받아서 두 값을 더한 값을 result에 저장하고 출력하도록 만들어 보세요.
    result = a + b
    print( f"{a} + {b} = {result}")  
add(10,5)


# 002 함수의 리턴
# 문제
# 매개변수로 변수 a와 b를 받는 함수 add를 정의하고 a와 b를 더한 값을 return해 보세요.
# 함수의 형식은
def add(a,b):
    result = a+b
    return result
print(add(10,5))


# 003 List 리스트
# ​리스트는 여러개의 값을 담을 수 있는 변수입니다. 
# list1 = [1,2,3,4,5]
# print(list1[0])    # 1이 출력됩니다.
# print(list1[1])    # 2가 출력됩니다.
# print(list1[5])    # 리스트에 들어있는 값보다 큰 값을 읽어오려고 하면 에러가 발생합니다.

# 문제
# 리스트 rainbow의 첫번째 값을 이용해서 무지개의 첫번째 색을 출력하는 코드입니다.
# first_color에 무지개의 첫번째 값을 저장하도록 수정해 보세요.
rainbow=['빨강','주황','노랑','초록','파랑','남색','보라']
first_color = rainbow[0]
print(f'무지개의 첫번째 색은 {first_color}이다')


# 004 리스트 사용하기
# 리스트의 마지막 값에 접근하는 방법을 알아봅시다. 
# 아래의 예제를 참고하여 문제를 해결해 보세요.
# list1 = [1,2,3,4,5]
# print(list1[-1])    # 뒤에서 첫번째 값인 5가 출력됩니다.
# print(list1[-2])    # 뒤에서 두번째 값인 4가 출력됩니다.
# print(list1[-6])    # 리스트에 들어있는 값 보다 큰 값을 읽어오려고 하면 에러가 발생합니다.

# 문제
# 리스트 rainbow의 마지막 값을 이용해서 무지개의 마지막 색을 출력하는 코드입니다. 
# last_color에 rainbow의 마지막 값을 저장하도록 수정해 보세요.
rainbow=['빨강','주황','노랑','초록','파랑','남색','보라']

last_color = rainbow[-1]
print(f'무지개의 마지막 색은 {last_color}이다')


# ​005 리스트 추가하기
# append를 이용해 보세요.
# list = [1, 3, 5]
# list.append(7)

# 리스트를 더해 보세요.
# list = [1, 3, 5]
# list = list + [4]

# 문제
# list1의 맨 끝에 숫자 4를 추가하는 코드를 추가해보세요.

list1=[1,2,3]
list1.append(4) #append 사용
print(list1)

list = [1,2,3]
list += [4]          # + 사용
print(list)


# 006 리스트 수정
# 리스트에 값이 들어있는지 확인려면 in 연산을 이용하면 됩니다. 
# 아래의 예제를 참고하여 문제를 해결해 보세요.
# # 12라는 값이 리스트에 들어있는지 확인하는 코드
# n = 12
# if n in list1:    # list1에 12가 있으면 print문이 실행됩니다.
#     print(f'{n}가 리스트에 있다.')

# 문제
# numbers에 5가 들어있을때, 5가 있다를 출력하도록 빈칸을 채워 보세요.
numbers = [1,2,3,4,5]
n = 5
if n in numbers:
    print(f'{n}가 리스트에 있다')


# 007 리스트 지우기
# ​리스트에서 값을 지우는 방법은 아래의 예와 같습니다.
# del list1[10]       # 리스트의 10번째 값을 지웁니다.
# list1.remove(40)    # 리스트에 40이라는 값이 있는 경우 삭제합니다.
                    # 여러개의 값이 있는 경우 가장 앞에 있는 하나만 지워집니다.

# 문제
# list1에 포함된 2를 지워서 list1의 값이 [1,3]이 되도록 만들어 보세요.

list1=[1,2,3]
# 여기에 코드를 추가해 보세요.
list1.remove(2)
print(list1)


# 008 딕셔너리 만들기
# 딕셔너리란 여러 값을 저장해 두고 필요한 값을 꺼내 쓰는 기능입니다. 
# 이름표를 아용하여 값을 꺼내 사용하며, 리스트와 비슷한 방식을 갖습니다.
wintable = {
    '가위' : '보',
    '바위' : '가위',
    '보' : '바위'   
}
print(wintable['가위'])    #'보'가 출력됩니다.

# 문제
# 월을 이름표로 가지고, 그 달에 있는 날짜 수를 값으로 가지는 
# 딕셔너리를 만들어서 days_in_month에 저장해 보세요.
# 월은 '1월','2월'과 같은 형식으로 저장하면 됩니다. 
# 예를 들어 days_in_month['1월'] 하면 그 값은 31이어야 합니다.1
# 3월까지만 값을 넣어 보세요.
# 1월은 31일, 2월은 28일, 3월은 31일까지만 있다고 가정하세요. 

days_in_month = {
    #여기에 코드를 완성해 보세요.
    '1월' : 31, '2월' : 28, '3월' : 31,
    '4월' : 30, '5월' : 31, '6월' : 30,
    '7월' : 31, '8월' : 31, '9월' : 30,
    '10월' : 31, '11월' : 30, '12월' : 31,
}
print(days_in_month)


# ​009 딕셔너리 입력 자료형
# 문제
# 딕셔너리의 이름표(key)는 문자열과 숫자형, 튜플을 사용할 수 있으며, 
# 값(Value)으로는 어떤 자료형이 오던 상관 없습니다. 
# 이름 홍길동
# 번호 1010
# 취미 ["낮잠","숨쉬기","커피"]
dict1 = {     
    '이름' : '홍길동', '번호' : 1010,
    '취미' : ['낮잠','숨쉬기','커피']
 }
print(dict1)


# ​010 딕셔너리 수정하기
# 아래의 예를 통해 딕셔너리를 수정하는 방법을 알아봅시다.
# dict['one' : 1, 'two' : 2]
# dict['three'] = 3    # 값을 추가합니다  {'one' : 1, 'two' : 2, 'three' : 3}
# dict['one'] = 11     # 값을 수정합니다  {'one' : 11, 'two' : 2, 'three' : 3}

# 문제
# days_in_month에는 2월이 28일까지 있다고 만들어져 있는데요. 
# 알고보니 2016년에는 2월이 29일까지 있습니다. 
# 2월이라는 이름표가 가지는 값을 29로 수정해 보세요. 
days_in_month = {"1월":31, "2월":28, "3월":31}
# 딕셔너리 수정
days_in_month['2월'] = 29
print(days_in_month)